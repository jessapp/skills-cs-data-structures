# Runtime

# When calculating the Big O notation for a particular algorithm, it’s necessary to consider the length of time it takes for the algorithm 
# to run as the algorithm’s workload approaches the size of infinity. What is the workload of a function that takes in a list of integers 
#and returns a new list of the even integers?
    O(n)
# Order the following runtimes in ascending order by efficiency as n approaches infinity:
# O(log n),
# O(n2)
# O(n log n)
# O(n)
# O(2n)
# O(1)

1. O(1)
2. O(log n)
3. O(n)
4. O(n log n)
5. O(n2)
6. O(2n)

# Stacks and Queues

# In the following cases, would a stack or queue be an appropriate data structure?
# 1. The process of loading and unloading pallets onto a flatbed truck
# 2. Putting bottle caps on bottles of beer as they roll down an assembly line
# 3. Calculating the solution to this mathematical expression: 2 + (7 * 4) - (3 / 2)
# 4. Describe 2 more examples of when a queue would be an appropriate data structure.
# 5. Describe 2 more examples of when a stack would be an appropriate data structure.

1. Stack
2. Queue
3. Stack
4. Stack: A) a stack of books, the last book will always be on top and is the last one added and the first one to be removed. B) A browser 
back button/history will give the user the most recent page they were on first, so last in first out functionality. 
5. Queues:  A) People standing in line at a movie ticket booth- the first people in line will be helped first, so first in first out.
B) waiting on hold on the phone, customers are placed in a queue, the one to call first gets helped first and then in descending order. 

# Linked Lists

# Given the below linked list, which are the nodes? What is the data for each node? Where is the head? Where is the tail? (Please be as specific as possible — exactly which parts of the diagram correspond to each part? Arrows? Boxes? Text?)
All of the boxes are nodes. The head is the LLIST which points to apple, which points to berry, which then points to cherry.
The data for each node is head, apple, berry, cherry. The tail is cherry. 
# What’s the difference between a doubly and singly linked list?
A singly linked list only allows you to go one way in terms of direction. SLL uses less memory since
there is only one pointer per node which always points to the next node in the LL. A DLL has two
way directional functionality, next and previous. For a SLL, each node keeps track
of the data and pointer to the next. A DLL contains data, link to both next node and the last node. 
# Why is it faster to append to a linked list if we keep track of the tail as an attribute?
So you can go directly to the tail node and append to that, if you dont know where the end of
you LL, you have to go through the whole entire thing one by one by chaining .next.next..... Much
easier to set the tail and keep track in order to make quick changes. 


# Trees

# Given the above tree, in what order would a Breadth First Search (BFS) algorithm visit each node until finding burrito (starting at food)?
# Given the above tree, in what order would a Depth First Search algorithm visit each node until finding Chicago-style (starting at food)?
# How is a binary search tree different from other trees?

DFS would find burrito in the third round, by searching the children on the current node starting on the right.
The search would hit Mexican first and then search its children and immediately find burrito since its the 
first child to get added to the stack. 

BFS would first go through Italian, Indian and Mexican. Pop Italian (not what we want, which is at [0]) and add children
(lasagna/pizza). Pop Indian (not what we want) and add children (lasagna/pizza/tikka/saag). Pop Mexican
and add children (lasagna/pizza/tikka/saag/burrito/tacos/enchiladas). Not lasagna, so pop it. Not pizza so pop and add children.
(tikka/saag/burrito/tacos/enchiladas/thin crust/chigago-style/NY/sicilian). Go through and 
pop until you hit Chicago and you have your pizza. Yay. 

A binary tree is a tree with nodes, and each node has a left and right child. The trees
are arranged with a rule. Less than is on the left, greater than is on the right. This creates
an incredibly fast search since you cut down what you need to search through by HALF each time you hit a node. 
